<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} Authentication plugin.
 *
 * @package     Joomla.Plugin
 * @subpackage  plg_authentication_${1/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class PlgAuthentication${1:${TM_FILENAME/(.*)[.](.*)/\u$1/g}} extends JPlugin
{
	/**
	 * This method should handle any authentication and report back to the subject.
	 *
	 * @param   array   \$credentials  Array holding the user credentials.
	 * @param   array   \$options      Array of extra options.
	 * @param   object  &\$response    Authentication response object.
	 *
	 * @return  boolean
	 *
	 * @since   $TM_VERSION
	 */
	public function onUserAuthenticate(\$credentials, \$options, &\$response)
	{
		\$response->type = '${1/(.+)/\u\1/g}';

		// Joomla does not like blank passwords.
		if (empty(\$credentials['password']))
		{
			\$response->status = JAuthentication::STATUS_FAILURE;
			\$response->error_message = JText::_('JGLOBAL_AUTH_EMPTY_PASS_NOT_ALLOWED');

			return false;
		}

		// Parameters to be passed to the database driver.
		\$option = array();

		\$option['driver']   = '${2:mysql}';
		\$option['host']     = '${3:localhost}';
		\$option['user']     = '${4:root}';
		\$option['password'] = '${5:root}';
		\$option['database'] = '${6:database}';
		\$option['prefix']   = '${7:jos_}';

		// Initialiase variables.
		\$db    = JDatabaseDriver::getInstance(\$option);
		\$query = \$db->getQuery(true);

		// Create the base select statement.
		\$query->select('id, password')
			->from('#__${8:users}')
			->where('${9:username}=' . \$db->quote(\$credentials['username']));

		// Set the query and load the result.
		\$db->setQuery(\$query);
		\$result = \$db->loadObject();

		if (\$result)
		{
			\$match = JUserHelper::verifyPassword(\$credentials['password'], \$result->password, \$result->id);

			if (\$match === true)
			{
				// Bring this in line with the rest of the system.
				\$user = JUser::getInstance(\$result->id);
				\$response->email = \$user->email;
				\$response->fullname = \$user->name;

				if (JFactory::getApplication()->isAdmin())
				{
					\$response->language = \$user->getParam('admin_language');
				}
				else
				{
					\$response->language = \$user->getParam('language');
				}

				\$response->status = JAuthentication::STATUS_SUCCESS;
				\$response->error_message = '';
			}
			else
			{
				// Invalid password.
				\$response->status = JAuthentication::STATUS_FAILURE;
				\$response->error_message = JText::_('JGLOBAL_AUTH_INVALID_PASS');
			}
		}
		else
		{
			// Invalid user.
			\$response->status = JAuthentication::STATUS_FAILURE;
			\$response->error_message = JText::_('JGLOBAL_AUTH_NO_USER');
		}

		// Check the two factor authentication.
		if (\$response->status == JAuthentication::STATUS_SUCCESS)
		{
			require_once JPATH_ADMINISTRATOR . '/components/com_users/helpers/users.php';

			\$methods = UsersHelper::getTwoFactorMethods();

			if (count(\$methods) <= 1)
			{
				// No two factor authentication method is enabled.
				return;
			}

			require_once JPATH_ADMINISTRATOR . '/components/com_users/models/user.php';

			\$model = new UsersModelUser;

			// Load the user's OTP (one time password, a.k.a. two factor auth) configuration.
			if (!array_key_exists('otp_config', \$options))
			{
				\$otpConfig = \$model->getOtpConfig(\$result->id);
				\$options['otp_config'] = \$otpConfig;
			}
			else
			{
				\$otpConfig = \$options['otp_config'];
			}

			// Check if the user has enabled two factor authentication.
			if (empty(\$otpConfig->method) || (\$otpConfig->method == 'none'))
			{
				// Warn the user if he's using a secret code but he has not
				// enabed two factor auth in his account.
				if (!empty(\$credentials['secretkey']))
				{
					try
					{
						\$app = JFactory::getApplication();

						\$this->loadLanguage();

						\$app->enqueueMessage(JText::_('PLG_AUTHENTICATION_${1/(.+)/\U\1/g}_ERR_SECRET_CODE_WITHOUT_TFA'), 'warning');
					}
					catch (Exception \$exc)
					{
						// This happens when we are in CLI mode. In this case
						// no warning is issued.
						return;
					}
				}

				return;
			}

			// Load the Joomla! RAD layer.
			if (!defined('FOF_INCLUDED'))
			{
				include_once JPATH_LIBRARIES . '/fof/include.php';
			}

			// Try to validate the OTP.
			FOFPlatform::getInstance()->importPlugin('twofactorauth');

			\$otpAuthReplies = FOFPlatform::getInstance()->runPlugins('onUserTwofactorAuthenticate', array(\$credentials, \$options));
			\$check = false;

			/*
			 * This looks like noob code but DO NOT TOUCH IT and do not convert
			 * to in_array(). During testing in_array() inexplicably returned
			 * null when the OTEP begins with a zero! o_O
			 */
			if (!empty(\$otpAuthReplies))
			{
				foreach (\$otpAuthReplies as \$authReply)
				{
					\$check = \$check || \$authReply;
				}
			}

			// Fall back to one time emergency passwords.
			if (!\$check)
			{
				// Did the user use an OTEP instead?
				if (empty(\$otpConfig->otep))
				{
					if (empty(\$otpConfig->method) || (\$otpConfig->method == 'none'))
					{
						// Two factor authentication is not enabled on this account.
						// Any string is assumed to be a valid OTEP.
						return true;
					}
					else
					{
						/*
						 * Two factor authentication enabled and no OTEPs defined. The
						 * user has used them all up. Therefore anything he enters is
						 * an invalid OTEP.
						 */
						return false;
					}
				}

				// Clean up the OTEP (remove dashes, spaces and other funny stuff
				// our beloved users may have unwittingly stuffed in it).
				\$otep  = \$credentials['secretkey'];
				\$otep  = filter_var(\$otep, FILTER_SANITIZE_NUMBER_INT);
				\$otep  = str_replace('-', '', \$otep);
				\$check = false;

				// Did we find a valid OTEP?
				if (in_array(\$otep, \$otpConfig->otep))
				{
					// Remove the OTEP from the array.
					\$otpConfig->otep = array_diff(\$otpConfig->otep, array(\$otep));

					\$model->setOtpConfig(\$result->id, \$otpConfig);

					// Return true; the OTEP was a valid one.
					\$check = true;
				}
			}

			if (!\$check)
			{
				\$response->status = JAuthentication::STATUS_FAILURE;
				\$response->error_message = JText::_('JGLOBAL_AUTH_INVALID_SECRETKEY');
			}
		}
	}
}

]]></content>
	<tabTrigger>jpluginauthentication_advanced</tabTrigger>
	<scope>source.php</scope>
</snippet>
